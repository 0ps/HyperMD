import { writeFileSync } from 'fs'
import buble from 'rollup-plugin-buble'
import typescript from 'rollup-plugin-typescript2'

/** HyperMD stuff */
const hypermdStuff = {
  "mode/hypermd": null, // not exposed
  "addon/insert-file": "InsertFile",
  "addon/readlink": "ReadLink",
}

/** Third-party libs */
const globalNames = {
  codemirror: "CodeMirror",
  marked: "marked",
  mathjax: "MathJax", // not really avaliable though
  hypermd: "HyperMD",
}

const external_tester = id_or_FilePath => {
  return id_or_FilePath in globalNames || !/^[\.\/]|^\w\:|\.ts$/.test(id_or_FilePath)
}

const hypermd_import_rename = (() => {
  return {
    name: "HyperMD_Replacer",
    transform(code, id) {
      // DO NOT TOUCH core/*.ts
      if (/core[\\\/].+\.ts$/.test(id)) return

      // since "core/index.ts" exports everything inside "core"
      // we just need to import "hypermd"
      code = code.replace(/^\s*import\s+(.+from)?\s+(["'])(.+?)\2/gm, (line, imported_as, _, importee) => {
        console.log("Found Import", importee, "from", id)
        if (importee.substr(0, 7) === "../core") importee = "hypermd"
        return `import ${imported_as} "${importee}"`
      })

      return code
    }
  }
})()

const hypermd_import_for_singles = (() => {
  return {
    name: "HyperMD_Replacer2",
    resolveId(importee, importer) {
      console.log(importee)
      return null
    }
  }
})()

const the_plugins_for_singles = [
  typescript(),
  hypermd_import_rename,
  hypermd_import_for_singles,
  buble({ namedFunctionExpressions: false })
]

const the_plugins = [
  typescript(),
  hypermd_import_rename,
  buble({ namedFunctionExpressions: false })
]

var configs = [
  // Core
  {
    input: "./hypermd/core/index.ts",
    external: external_tester,
    output: {
      file: 'dist/hypermd.js',
      format: 'umd',
      name: "HyperMD",
      globals: globalNames,
    },
    plugins: the_plugins
  },
]

var ai1_imports = []
var ai1_exports = []

// compile every addon

for (const id in hypermdStuff) {
  var configItem = {
    input: "./hypermd/" + id + ".ts",
    external: req_id => (req_id.indexOf(id) === -1),  // everything is external except itself!
    output: {
      file: "dist/" + id + ".js",
      format: "umd",
      globals: globalNames,
    },
    plugins: the_plugins_for_singles
  }

  const export_as = hypermdStuff[id]
  if (export_as) {
    configItem.output.name = "HyperMD." + export_as
    ai1_exports.push(export_as)
    ai1_imports.push(`import * as ${export_as} from "./${id}"`)
  } else {
    ai1_imports.push(`import "./${id}"`)
  }

  configs.push(configItem)
}

// generate all-in-one bundle file

writeFileSync("./hypermd/ai1.ts", `// All in one HyperMD bundle!
//
// **DO NOT EDIT!** This file is generated by rollup.config.js
//

export * from "./core/index"

${ai1_imports.join("\n")}

${ai1_exports.length ? ("export { " + ai1_exports.join(", ") + " }") : ("// No more exports")}
`)

// if not watch mode, build the all-in-one bundle

// if (process.argv.indexOf("-w") === -1) {
//   configs.push({
//     input: "./hypermd/ai1.ts",
//     external: external_tester,
//     output: {
//       file: 'dist/hypermd_full.js',
//       format: 'umd',
//       name: "HyperMD",
//       globals: globalNames,
//     },
//     plugins: the_plugins
//   })
// }

export default configs
